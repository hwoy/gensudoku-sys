/* automatically generated by rust-bindgen 0.69.1 */

pub const S_ZSQR: u32 = 3;
pub const S_SQR: u32 = 9;
pub const SUDOKU_ENGINE_MAJOR_VERSION: u32 = 1;
pub const SUDOKU_ENGINE_MINOR_VERSION: u32 = 1;
pub const SUDOKU_ENGINE_SMINOR_VERSION: u32 = 0;
pub type URND32 = ::std::os::raw::c_ulong;
pub type RND32 = ::std::os::raw::c_long;
pub type GLIBCRNGOBJECT = RND32;
pub type GLIBCRNG = [GLIBCRNGOBJECT; 31usize];
pub type cont_PGLIBCRNG = *const GLIBCRNGOBJECT;
pub type PGLIBCRNG = *mut GLIBCRNGOBJECT;
extern "C" {
    pub fn glibcrnginit(buffer: PGLIBCRNG, seed: URND32) -> PGLIBCRNG;
}
extern "C" {
    pub fn glibcrng(buffer: PGLIBCRNG) -> URND32;
}
pub type sgt_set = ::std::os::raw::c_ushort;
pub type sgt_bid = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgs_unit {
    pub idx: ::std::os::raw::c_uint,
    pub idy: ::std::os::raw::c_uint,
    pub idz: ::std::os::raw::c_uint,
    pub value: sgt_set,
    pub valuep: sgt_set,
}
#[test]
fn bindgen_test_layout_sgs_unit() {
    const UNINIT: ::std::mem::MaybeUninit<sgs_unit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgs_unit>(),
        16usize,
        concat!("Size of: ", stringify!(sgs_unit))
    );
    assert_eq!(
        ::std::mem::align_of::<sgs_unit>(),
        4usize,
        concat!("Alignment of ", stringify!(sgs_unit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_unit),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_unit),
            "::",
            stringify!(idy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_unit),
            "::",
            stringify!(idz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_unit),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valuep) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_unit),
            "::",
            stringify!(valuep)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgs_board {
    pub unit: [[sgs_unit; 9usize]; 9usize],
}
#[test]
fn bindgen_test_layout_sgs_board() {
    const UNINIT: ::std::mem::MaybeUninit<sgs_board> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgs_board>(),
        1296usize,
        concat!("Size of: ", stringify!(sgs_board))
    );
    assert_eq!(
        ::std::mem::align_of::<sgs_board>(),
        4usize,
        concat!("Alignment of ", stringify!(sgs_board))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_board),
            "::",
            stringify!(unit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sgs_game {
    pub rng: GLIBCRNG,
    pub bid: sgt_bid,
    pub numblank: ::std::os::raw::c_uint,
    pub board: sgs_board,
    pub majorver: ::std::os::raw::c_uint,
    pub minorver: ::std::os::raw::c_uint,
    pub sminorver: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sgs_game() {
    const UNINIT: ::std::mem::MaybeUninit<sgs_game> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sgs_game>(),
        1440usize,
        concat!("Size of: ", stringify!(sgs_game))
    );
    assert_eq!(
        ::std::mem::align_of::<sgs_game>(),
        4usize,
        concat!("Alignment of ", stringify!(sgs_game))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rng) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(rng)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bid) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(bid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numblank) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(numblank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).board) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(board)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).majorver) as usize - ptr as usize },
        1428usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(majorver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minorver) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(minorver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sminorver) as usize - ptr as usize },
        1436usize,
        concat!(
            "Offset of field: ",
            stringify!(sgs_game),
            "::",
            stringify!(sminorver)
        )
    );
}
extern "C" {
    pub fn sgf_init(
        game: *mut sgs_game,
        bid: sgt_bid,
        numblank: ::std::os::raw::c_uint,
    ) -> *mut sgs_game;
}
extern "C" {
    pub fn sgf_setvalue(
        value: sgt_set,
        game: *mut sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sgf_getvalue(
        game: *const sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> sgt_set;
}
extern "C" {
    pub fn sgf_setbid(game: *mut sgs_game, bid: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sgf_getvalue_x(game: *const sgs_game, y: ::std::os::raw::c_uint) -> sgt_set;
}
extern "C" {
    pub fn sgf_getvalue_y(game: *const sgs_game, x: ::std::os::raw::c_uint) -> sgt_set;
}
extern "C" {
    pub fn sgf_getvalue_z(
        game: *const sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> sgt_set;
}
extern "C" {
    pub fn sgf_getvalue_p(
        game: *mut sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> sgt_set;
}
extern "C" {
    pub fn sgf_countvalue_set(value: sgt_set) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_countvalue(
        game: *const sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_seed(game: *mut sgs_game, seed: URND32);
}
extern "C" {
    pub fn sgf_rand(game: *mut sgs_game) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_random(
        game: *mut sgs_game,
        min: ::std::os::raw::c_uint,
        max: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_log2a(num: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_findvalueone(
        game: *mut sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_findvalueunique(
        game: *mut sgs_game,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_getobstruct(game: *mut sgs_game) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sgf_genboard(game: *mut sgs_game) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sgf_completeboard(game: *const sgs_game) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sgf_resetboard(game: *mut sgs_game);
}
extern "C" {
    pub fn sgf_findboard(game: *mut sgs_game) -> sgt_bid;
}
extern "C" {
    pub fn sgf_getbid(game: *const sgs_game) -> sgt_bid;
}
extern "C" {
    pub fn sgf_createsudoku(game: *mut sgs_game);
}
extern "C" {
    pub fn sgf_createsudoku_rnd(game: *mut sgs_game, sd: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sgf_setnblank(game: *mut sgs_game, numblank: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sgf_getnblank(game: *const sgs_game) -> ::std::os::raw::c_uint;
}
